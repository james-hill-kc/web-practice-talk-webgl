WEB PRACTICE TALK - WEBGL WITHOUT FRAMEWORKS
============================================


Todo:
-----

- Decide on presentation software, slide template, fonts etc.
- Plan structure and content for talk
- Collect images and references
- Get demo program working and commented


Basic structure of talk:
------------------------

25 to 30 mins total + 15 mins for Q&A

- brief history of the GPU
	- software rendering era
		- 
	- birth of the GPU (including overview of how the GPU works)
		- cpu vs gpu
			- cpu
				- small number of large cores
				- general purpose
				- fast access to system RAM
				- best for serial operations
			- gpu
				- large number of small cores
				- special purpose
				- slow access to RAM (has VRAM but data must be transferred from RAM by CPU)
				- best for parallel operations (drawing pixels, mining bitcoins, cracking passwords...)
	- before standards (proprietary APIs)
	- early standards (opengl and directx)
	- present day (opengl es and webgl)

- 3D rendering pipeline
	- coordinate system (right handed, view frustum with near/far planes)
	- local, world and screen space
	- model, view and projection transforms

- WebGL API
	- provides our interface to the GPU
	- shaders
		- define the program that runs on the GPU
		- written in GLSL, a special-purpose C-like language
		- two types of shaderts - vertex and fragment
			- vertex shaders run for each vertex, and generate coordinates for the fragment shader
			- fragment shaders run for each pixel, and determines the colour of the pixel on the screen
		- shader parameters
			- attributes - change for each iteration of the shader (eg. vertex buffer)
			- uniforms - constant for all iterations of the shader (eg. modelview matrix)




Further reading links:
----------------------

https://webgl2fundamentals.org/webgl/lessons/webgl-fundamentals.html
https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Tutorial
https://jsantell.com/model-view-projection/
https://learnopengl.com/Getting-started/Hello-Triangle


===
